
<?xml version="1.0" encoding="UTF-8"?>
<configuration status="debug">
    <!--     先定义所有的appender -->
    <appenders>
        <!--         这个输出控制台的配置 -->
        <Console name="Console" target="SYSTEM_OUT">
            <!--             控制台只输出level及以上级别的信息（onMatch），其他的直接拒绝（onMismatch） -->
            <ThresholdFilter level="trace" onMatch="ACCEPT" onMismatch="DENY"/>
            <!--             这个都知道是输出日志的格式 -->
            <PatternLayout pattern="%d{HH:mm:ss.SSS} %-5level %class{36} %L %M - %msg%xEx%n"/>
        </Console>

        <!--         文件会打印出所有信息，这个log每次运行程序会自动清空，由append属性决定，这个也挺有用的，适合临时测试用 -->
        <!--         append为TRUE表示消息增加到指定文件中，false表示消息覆盖指定的文件内容，默认值是true -->
        <File name="log" fileName="logs/request.log" append="false">
            <PatternLayout pattern="%d{HH:mm:ss.SSS} %-5level %class{36} %L %M - %msg%xEx%n"/>
        </File>

        <!--          添加过滤器ThresholdFilter,可以有选择的输出某个级别以上的类别  onMatch="ACCEPT" onMismatch="DENY"意思是匹配就接受,否则直接拒绝  -->
        <File name="ERROR" fileName="logs/error.log">
            <ThresholdFilter level="error" onMatch="ACCEPT" onMismatch="DENY"/>
            <PatternLayout pattern="%d{yyyy.MM.dd 'at' HH:mm:ss z} %-5level %class{36} %L %M - %msg%xEx%n"/>
        </File>

        <!--         这个会打印出所有的信息，每次大小超过size，则这size大小的日志会自动存入按年份-月份建立的文件夹下面并进行压缩，作为存档 -->
        <RollingFile name="RollingFile" fileName="logs/web.log"
                     filePattern="logs/$${date:yyyy-MM}/web-%d{MM-dd-yyyy}-%i.log.gz">
            <PatternLayout pattern="%d{yyyy-MM-dd 'at' HH:mm:ss z} %-5level %class{36} %L %M - %msg%xEx%n"/>
            <SizeBasedTriggeringPolicy size="2MB"/>
        </RollingFile>
    </appenders>

    <!--     然后定义logger，只有定义了logger并引入的appender，appender才会生效 -->
    <loggers>
        <!--         建立一个默认的root的logger -->
        <root level="debug">
            <appender-ref ref="RollingFile"/>
            <appender-ref ref="Console"/>
            <appender-ref ref="ERROR" />
            <appender-ref ref="log"/>
        </root>
    </loggers>
</configuration>

        <!--<?xml version="1.0" encoding="UTF-8"?>-->
<!--&lt;!&ndash;version（版本），enciding(编码),configuration(配置)，appenders（输出源），loggers（登录器)&ndash;&gt;-->
<!--&lt;!&ndash;根节点Configuration有两个属性:status和monitorinterval,有两个子节点:Appenders和Loggers(表明可以定义多个Appender和Logger).-->
        <!--　　　　　　　status用来指定log4j本身的打印日志的级别.-->
        <!--　　　　　　　monitorinterval用于指定log4j自动重新配置的监测间隔时间，单位是s,最小是5s.&ndash;&gt;-->
<!--<configuration status="debug">-->
   <!--&lt;!&ndash;Appenders节点，常见的有三种子节点:Console、RollingFile、File.&ndash;&gt;-->
    <!--<appenders>-->
       <!--&lt;!&ndash; Console节点用来定义输出到控制台的Appender.-->
        <!--　　　　　　　　name:指定Appender的名字.-->
        <!--　　　　　　　　target:SYSTEM_OUT 或 SYSTEM_ERR,一般只设置默认:SYSTEM_OUT.-->
        <!--　　　　　　　　PatternLayout:输出格式，不设置默认为:%m%n.&ndash;&gt;-->
        <!--<Console name="Console" target="SYSTEM_OUT">-->
            <!--<PatternLayout pattern="%d{DEFAULT} [%t] %-5p (%C{1}:%L) - %m%n"/>-->
        <!--</Console>-->
    <!--</appenders>-->
<!--&lt;!&ndash; Loggers节点，常见的有两种:Root和Logger.&ndash;&gt;-->
    <!--<loggers>-->
       <!--&lt;!&ndash; Root节点用来指定项目的根日志，如果没有单独指定Logger，那么就会默认使用该Root日志输出-->
        <!--　　　　　　　　　level:日志输出级别，共有8个级别，按照从低到高为：All < Trace < Debug < Info < Warn < Error < Fatal < OFF.-->
        <!--　　　　　　　　　AppenderRef：Root的子节点，用来指定该日志输出到哪个Appender.&ndash;&gt;-->

            <!--<root level="debug">-->
                <!--<appender-ref ref="Console"/>-->
            <!--</root>-->
        <!--</loggers>-->
    <!--</configuration>-->


